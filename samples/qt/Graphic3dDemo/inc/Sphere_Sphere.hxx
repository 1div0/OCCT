// File generated by CPPExt (Transient)
//
//                     Copyright (C) 1991,1995 by
//  
//                      MATRA DATAVISION, FRANCE
//  
// This software is furnished in accordance with the terms and conditions
// of the contract and with the inclusion of the above copyright notice.
// This software or any other copy thereof may not be provided or otherwise
// be made available to any other person. No title to an ownership of the
// software is hereby transferred.
//  
// At the termination of the contract, the software and all copies of this
// software must be deleted.
//
#ifndef _Sphere_Sphere_HeaderFile
#define _Sphere_Sphere_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Handle_Sphere_Sphere_HeaderFile
#include <Handle_Sphere_Sphere.hxx>
#endif

#include <Standard_Real.hxx>
#include <Sphere_BasicShape.hxx>
#include <Standard_Boolean.hxx>
#include <Handle_PrsMgr_PresentationManager3d.hxx>
#include <Handle_Prs3d_Presentation.hxx>
#include <Standard_Integer.hxx>
class gp_Pnt;
class PrsMgr_PresentationManager3d;
class Prs3d_Presentation;


class Sphere_Sphere : public Sphere_BasicShape {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 
Standard_EXPORT Sphere_Sphere(const gp_Pnt& aPosition,const Standard_Real aRadius,const Standard_Real aDeflection = 1.0,const Standard_Boolean hasVNormals = Standard_True,const Standard_Boolean hasVColors = Standard_False,const Standard_Boolean hasVTexels = Standard_False, const Standard_Boolean hasText = Standard_False, const Standard_Boolean isOptText = Standard_False);
Standard_EXPORT   void Compute(const Handle(PrsMgr_PresentationManager3d)& aPresentationManager,const Handle(Prs3d_Presentation)& aPresentation,const Standard_Integer aMode = 0) ;
Standard_EXPORT   void SetRadius(const Standard_Real aValue) ;
Standard_EXPORT   Standard_Real Radius() const;
Standard_EXPORT static  Standard_Integer NbPanes(const Standard_Real aRadius,const Standard_Real aDeflection) ;
Standard_EXPORT static  Standard_Integer NbPanes(const Standard_Integer nbItems) ;
Standard_EXPORT static  Standard_Integer NbItems(const Standard_Integer nbPanes) ;
Standard_EXPORT static  Standard_Real Deflection(const Standard_Real aRadius,const Standard_Integer nbPanes) ;
Standard_EXPORT ~Sphere_Sphere();




 // Type management
 //
 Standard_EXPORT friend Handle_Standard_Type& Sphere_Sphere_Type_();
 Standard_EXPORT const Handle_Standard_Type& DynamicType() const;
 Standard_EXPORT Standard_Boolean	       IsKind(const Handle(Standard_Type)&) const;

protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //
Standard_Real myRadius;
Standard_Boolean myText;
Standard_Boolean myOptText;


};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
