// File generated by CPPExt (Transient)
//
//                     Copyright (C) 1991,1995 by
//  
//                      MATRA DATAVISION, FRANCE
//  
// This software is furnished in accordance with the terms and conditions
// of the contract and with the inclusion of the above copyright notice.
// This software or any other copy thereof may not be provided or otherwise
// be made available to any other person. No title to an ownership of the
// software is hereby transferred.
//  
// At the termination of the contract, the software and all copies of this
// software must be deleted.
//
#ifndef _ISession2D_InteractiveContext_HeaderFile
#define _ISession2D_InteractiveContext_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Handle_ISession2D_InteractiveContext_HeaderFile
#include <Handle_ISession2D_InteractiveContext.hxx>
#endif

#ifndef _Handle_V2d_Viewer_HeaderFile
#include <Handle_V2d_Viewer.hxx>
#endif
#ifndef _Handle_PrsMgr_PresentationManager2d_HeaderFile
#include <Handle_PrsMgr_PresentationManager2d.hxx>
#endif
#ifndef _TColStd_MapOfTransient_HeaderFile
#include <TColStd_MapOfTransient.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_SelectMgr_SelectionManager_HeaderFile
#include <Handle_SelectMgr_SelectionManager.hxx>
#endif
#ifndef _Handle_StdSelect_ViewerSelector2d_HeaderFile
#include <Handle_StdSelect_ViewerSelector2d.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Handle_AIS_InteractiveObject_HeaderFile
#include <Handle_AIS_InteractiveObject.hxx>
#endif
#ifndef _Handle_V2d_View_HeaderFile
#include <Handle_V2d_View.hxx>
#endif
#ifndef _Handle_Select2D_Projector_HeaderFile
#include <Handle_Select2D_Projector.hxx>
#endif
class V2d_Viewer;
class PrsMgr_PresentationManager2d;
class SelectMgr_SelectionManager;
class StdSelect_ViewerSelector2d;
class AIS_InteractiveObject;
class V2d_View;
class Select2D_Projector;
class TColStd_MapOfTransient;


class ISession2D_InteractiveContext : public MMgt_TShared {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 
Standard_EXPORT ISession2D_InteractiveContext();
Standard_EXPORT ISession2D_InteractiveContext(const Handle(V2d_Viewer)& aViewer);
Standard_EXPORT virtual  void Initialize(const Handle(V2d_Viewer)& aViewer) ;
Standard_EXPORT virtual  void Display(const Handle(AIS_InteractiveObject)& anObject,const Standard_Boolean Redraw = Standard_True) ;
Standard_EXPORT   void Display(const Handle(AIS_InteractiveObject)& anObject,const Standard_Integer aDisplayMode,const Standard_Integer aSelectionMode,const Standard_Boolean Redraw) ;
Standard_EXPORT virtual  void Erase(const Handle(AIS_InteractiveObject)& anObject,const Standard_Boolean Redraw = Standard_True) ;
Standard_EXPORT virtual  void DisplayAll(const Standard_Boolean Redraw = Standard_True) ;
Standard_EXPORT virtual  void EraseAll(const Standard_Boolean Redraw = Standard_True) ;
Standard_EXPORT virtual  Standard_Boolean IsDisplayed(const Handle(AIS_InteractiveObject)& anObject,const Standard_Integer aMode = -1) ;
Standard_EXPORT virtual  void Redisplay(const Handle(AIS_InteractiveObject)& anObject,const Standard_Boolean Redraw = Standard_True,const Standard_Boolean allmodes = Standard_True) ;
Standard_EXPORT virtual  void Clear(const Handle(AIS_InteractiveObject)& anObject,const Standard_Boolean Redraw = Standard_True) ;
Standard_EXPORT virtual  void Remove(const Handle(AIS_InteractiveObject)& anObject,const Standard_Boolean Redraw = Standard_True) ;
Standard_EXPORT virtual  void Highlight(const Handle(AIS_InteractiveObject)& anObject,const Standard_Boolean Redraw = Standard_True) ;
Standard_EXPORT virtual  void Unhighlight(const Handle(AIS_InteractiveObject)& anObject,const Standard_Boolean Redraw = Standard_True) ;
Standard_EXPORT virtual  Standard_Boolean IsHilighted(const Handle(AIS_InteractiveObject)& anObject) ;
Standard_EXPORT virtual  void Move(const Standard_Integer x1,const Standard_Integer y1,const Handle(V2d_View)& aView) ;
Standard_EXPORT virtual  void Move(const Standard_Integer x1,const Standard_Integer y1,const Standard_Integer x2,const Standard_Integer y2,const Handle(V2d_View)& aView) ;
Standard_EXPORT virtual  void Pick(const Standard_Boolean MultiSelection = Standard_False) ;
Standard_EXPORT   void DisplayAreas() ;
Standard_EXPORT   void ClearAreas() ;
Standard_EXPORT ~ISession2D_InteractiveContext();




 // Type management
 //
 Standard_EXPORT friend Handle_Standard_Type& ISession2D_InteractiveContext_Type_();
 Standard_EXPORT const Handle(Standard_Type)& DynamicType() const;
 Standard_EXPORT Standard_Boolean	       IsKind(const Handle(Standard_Type)&) const;

protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 
Standard_EXPORT   Standard_Boolean NewProjector(const Handle(V2d_View)& aView,Handle(Select2D_Projector)& NewProjector) ;
Standard_EXPORT   void ManageDetected(TColStd_MapOfTransient& aNewMapOfDetectedOwner) ;
Standard_EXPORT   void GetDefModes(const Handle(AIS_InteractiveObject)& anObject,Standard_Integer& DispMode,Standard_Integer& HiMode,Standard_Integer& SelMode) const;


 // Fields PRIVATE
 //
Handle_V2d_Viewer myViewer;
Handle_PrsMgr_PresentationManager2d myPrsmgr;
TColStd_MapOfTransient myObjects;
Standard_Integer myHilightColorIndex;
Handle_SelectMgr_SelectionManager mySelectionManager;
Handle_StdSelect_ViewerSelector2d mySelector;
TColStd_MapOfTransient myMapOfDetectedOwner;
TColStd_MapOfTransient myMapOfSelectedOwner;
Standard_Boolean IsAreasDisplayed;


};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
