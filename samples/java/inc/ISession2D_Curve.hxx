// File generated by CPPExt (Transient)
//
//                     Copyright (C) 1991,1995 by
//  
//                      MATRA DATAVISION, FRANCE
//  
// This software is furnished in accordance with the terms and conditions
// of the contract and with the inclusion of the above copyright notice.
// This software or any other copy thereof may not be provided or otherwise
// be made available to any other person. No title to an ownership of the
// software is hereby transferred.
//  
// At the termination of the contract, the software and all copies of this
// software must be deleted.
//
#ifndef _ISession2D_Curve_HeaderFile
#define _ISession2D_Curve_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Handle_ISession2D_Curve_HeaderFile
#include <Handle_ISession2D_Curve.hxx>
#endif

#ifndef _Handle_Geom2d_Curve_HeaderFile
#include <Handle_Geom2d_Curve.hxx>
#endif
#ifndef _Aspect_TypeOfLine_HeaderFile
#include <Aspect_TypeOfLine.hxx>
#endif
#ifndef _Aspect_WidthOfLine_HeaderFile
#include <Aspect_WidthOfLine.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _AIS_InteractiveObject_HeaderFile
#include <AIS_InteractiveObject.hxx>
#endif
#ifndef _Handle_PrsMgr_PresentationManager2d_HeaderFile
#include <Handle_PrsMgr_PresentationManager2d.hxx>
#endif
#ifndef _Handle_Graphic2d_GraphicObject_HeaderFile
#include <Handle_Graphic2d_GraphicObject.hxx>
#endif
#ifndef _Handle_SelectMgr_Selection_HeaderFile
#include <Handle_SelectMgr_Selection.hxx>
#endif
class Geom2d_Curve;
class PrsMgr_PresentationManager2d;
class Graphic2d_GraphicObject;
class SelectMgr_Selection;


class ISession2D_Curve : public AIS_InteractiveObject {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 
Standard_EXPORT ISession2D_Curve(const Handle(Geom2d_Curve)& aGeom2dCurve,const Aspect_TypeOfLine aTypeOfLine = Aspect_TOL_SOLID,const Aspect_WidthOfLine aWidthOfLine = Aspect_WOL_MEDIUM,const Standard_Integer aColorIndex = 4);
Standard_EXPORT virtual  Standard_Integer NbPossibleSelection() ;
Standard_EXPORT   Aspect_TypeOfLine GetTypeOfLine() ;
Standard_EXPORT   void SetTypeOfLine(const Aspect_TypeOfLine aNewTypeOfLine) ;
Standard_EXPORT   Aspect_WidthOfLine GetWidthOfLine() ;
Standard_EXPORT   void SetWidthOfLine(const Aspect_WidthOfLine aNewWidthOfLine) ;
Standard_EXPORT   Standard_Integer GetColorIndex() ;
Standard_EXPORT   void SetColorIndex(const Standard_Integer aNewColorIndex) ;
Standard_EXPORT   Standard_Boolean GetDisplayPole() ;
Standard_EXPORT   void SetDisplayPole(const Standard_Boolean aNewDisplayPole) ;
Standard_EXPORT   Standard_Boolean GetDisplayCurbure() ;
Standard_EXPORT   void SetDisplayCurbure(const Standard_Boolean aNewDisplayCurbure) ;
Standard_EXPORT   Standard_Real GetDiscretisation() ;
Standard_EXPORT   void SetDiscretisation(const Standard_Real aNewDiscretisation) ;
Standard_EXPORT virtual  void Compute(const Handle(PrsMgr_PresentationManager2d)& aPresentationManager,const Handle(Graphic2d_GraphicObject)& aGrObj,const Standard_Integer aMode = 0) ;
Standard_EXPORT virtual  void ComputeSelection(const Handle(SelectMgr_Selection)& aSelection,const Standard_Integer aMode) ;
Standard_EXPORT ~ISession2D_Curve();




 // Type management
 //
 Standard_EXPORT friend Handle_Standard_Type& ISession2D_Curve_Type_();
 Standard_EXPORT const Handle(Standard_Type)& DynamicType() const;
 Standard_EXPORT Standard_Boolean	       IsKind(const Handle(Standard_Type)&) const;

protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //
Handle_Geom2d_Curve myGeom2dCurve;
Aspect_TypeOfLine myTypeOfLine;
Aspect_WidthOfLine myWidthOfLine;
Standard_Integer myColorIndex;
Standard_Boolean myDisplayPole;
Standard_Boolean myDisplayCurbure;
Standard_Real myDiscretisation;
Standard_Real myradiusmax;
Standard_Real myradiusratio;


};


#include <ISession2D_Curve.lxx>



// other Inline functions and methods (like "C++: function call" methods)
//


#endif
