// File generated by CPPExt (Transient)
//
//                     Copyright (C) 1991,1995 by
//  
//                      MATRA DATAVISION, FRANCE
//  
// This software is furnished in accordance with the terms and conditions
// of the contract and with the inclusion of the above copyright notice.
// This software or any other copy thereof may not be provided or otherwise
// be made available to any other person. No title to an ownership of the
// software is hereby transferred.
//  
// At the termination of the contract, the software and all copies of this
// software must be deleted.
//
#ifndef _ISession2D_SensitiveCurve_HeaderFile
#define _ISession2D_SensitiveCurve_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Handle_ISession2D_SensitiveCurve_HeaderFile
#include <Handle_ISession2D_SensitiveCurve.hxx>
#endif

#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_Geom2d_Curve_HeaderFile
#include <Handle_Geom2d_Curve.hxx>
#endif
#ifndef _Handle_TColgp_HArray1OfPnt2d_HeaderFile
#include <Handle_TColgp_HArray1OfPnt2d.hxx>
#endif
#ifndef _Select2D_SensitiveEntity_HeaderFile
#include <Select2D_SensitiveEntity.hxx>
#endif
#ifndef _Handle_SelectBasics_EntityOwner_HeaderFile
#include <Handle_SelectBasics_EntityOwner.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class Geom2d_Curve;
class TColgp_HArray1OfPnt2d;
class SelectBasics_EntityOwner;
class SelectBasics_ListOfBox2d;


class ISession2D_SensitiveCurve : public Select2D_SensitiveEntity {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 
Standard_EXPORT ISession2D_SensitiveCurve(const Handle(SelectBasics_EntityOwner)& OwnerId,const Handle(Geom2d_Curve)& C,const Standard_Real CDeflect,const Standard_Integer MaxRect = 3);
Standard_EXPORT   void SetMaxBoxes(const Standard_Integer MaxRect) ;
Standard_EXPORT virtual  Standard_Integer MaxBoxes() ;
Standard_EXPORT   void SetCurve(const Handle(Geom2d_Curve)& aCurve) ;
Standard_EXPORT   Handle_Geom2d_Curve GetCurve() ;
Standard_EXPORT   void Compute() ;
Standard_EXPORT virtual  void Areas(SelectBasics_ListOfBox2d& aSeq) ;
Standard_EXPORT virtual  Standard_Boolean Matches(const Standard_Real XMin,const Standard_Real YMin,const Standard_Real XMax,const Standard_Real YMax,const Standard_Real aTol) ;
Standard_EXPORT virtual  Standard_Boolean Matches(const Standard_Real X,const Standard_Real Y,const Standard_Real aTol,Standard_Real& DMin) ;
Standard_EXPORT   Handle_TColgp_HArray1OfPnt2d SensitivePolygon() ;
Standard_EXPORT ~ISession2D_SensitiveCurve();




 // Type management
 //
 Standard_EXPORT friend Handle_Standard_Type& ISession2D_SensitiveCurve_Type_();
 Standard_EXPORT const Handle(Standard_Type)& DynamicType() const;
 Standard_EXPORT Standard_Boolean	       IsKind(const Handle(Standard_Type)&) const;

protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //
Standard_Real myCDeflect;
Standard_Integer myMaxRect;
Handle_Geom2d_Curve myCurve;
Handle_TColgp_HArray1OfPnt2d myPolyP2d;


};


#include <ISession2D_SensitiveCurve.lxx>



// other Inline functions and methods (like "C++: function call" methods)
//


#endif
