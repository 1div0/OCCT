// File generated by CPPExt (Value)
//                     Copyright (C) 1991,1995 by
//  
//                      MATRA DATAVISION, FRANCE
//  
// This software is furnished in accordance with the terms and conditions
// of the contract and with the inclusion of the above copyright notice.
// This software or any other copy thereof may not be provided or otherwise
// be made available to any other person. No title to an ownership of the
// software is hereby transferred.
//  
// At the termination of the contract, the software and all copies of this
// software must be deleted.

#ifndef _SampleHLRPackage_HeaderFile
#define _SampleHLRPackage_HeaderFile

#ifndef _Handle_V3d_Viewer_HeaderFile
#include <Handle_V3d_Viewer.hxx>
#endif
#ifndef _Standard_ExtString_HeaderFile
#include <Standard_ExtString.hxx>
#endif
#ifndef _Handle_V3d_View_HeaderFile
#include <Handle_V3d_View.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_V2d_Viewer_HeaderFile
#include <Handle_V2d_Viewer.hxx>
#endif
#ifndef _Handle_V2d_View_HeaderFile
#include <Handle_V2d_View.hxx>
#endif
#ifndef _Handle_AIS_InteractiveContext_HeaderFile
#include <Handle_AIS_InteractiveContext.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_ISession2D_InteractiveContext_HeaderFile
#include <Handle_ISession2D_InteractiveContext.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
class V3d_Viewer;
class V3d_View;
class V2d_Viewer;
class V2d_View;
class AIS_InteractiveContext;
class ISession2D_InteractiveContext;


#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

class SampleHLRPackage  {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 
Standard_EXPORT static  Handle_V3d_Viewer CreateViewer3d(const Standard_ExtString aName) ;
Standard_EXPORT static  void SetWindow3d(const Handle(V3d_View)& aView,const Standard_Integer hiwin,const Standard_Integer lowin) ;
Standard_EXPORT static  Handle_V2d_Viewer CreateViewer2d(const Standard_ExtString aName) ;
Standard_EXPORT static  Handle_V2d_View CreateView2d(const Handle(V2d_Viewer)& aViewer,const Standard_Integer hiwin,const Standard_Integer lowin) ;
Standard_EXPORT static  void InitMaps(const Handle(V2d_Viewer)& aViewer) ;
Standard_EXPORT static  void DisplayTrihedron(const Handle(AIS_InteractiveContext)& aContext) ;
Standard_EXPORT static  Standard_Boolean GetShapes(const Handle(AIS_InteractiveContext)& aSrcContext,const Handle(AIS_InteractiveContext)& aDestContext) ;
Standard_EXPORT static  void Apply(const Handle(ISession2D_InteractiveContext)& aContext2d,const Standard_Integer aDisplayMode) ;
Standard_EXPORT static  void UpdateProjector(const Handle(V3d_View)& aView) ;
Standard_EXPORT static  void SetNbIsos(const Standard_Integer aNbIsos) ;
Standard_EXPORT static  Standard_Boolean ReadBRep(const Standard_CString aFileName,const Handle(AIS_InteractiveContext)& aContext) ;
Standard_EXPORT static  Standard_Boolean SaveBRep(const Standard_CString aFileName,const Handle(AIS_InteractiveContext)& aContext) ;
Standard_EXPORT static  Standard_Boolean SaveImage(const Standard_CString aFileName,const Standard_CString aFormat,const Handle(V3d_View)& aView) ;
Standard_EXPORT static  Standard_Boolean SaveImage(const Standard_CString aFileName,const Standard_CString aFormat,const Handle(V2d_View)& aView) ;





protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //


};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
