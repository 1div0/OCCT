// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

// ----------------------------------------------------------------------
// HSingleList implementation:
// Last Revision : Feb,10 1992 J.P Tirault
//                 Implementation of ShallowCopy, ShallowDump
//                 methods.
// -------------------------------------------------------------------------

#include <Standard_NoSuchObject.hxx>
#include <Standard_NotImplemented.hxx>
#include <Standard_ProgramError.hxx>
#include <Standard_OStream.hxx>

// -------------------------------------------------------------------------
//                                                                         -
// Constructor Returns an empty list                                       -
// ----------                                                              -
//                                                                         -
// -------------------------------------------------------------------------
PCollection_HSingleList::PCollection_HSingleList ()
{
 Next.Nullify();
}


// -------------------------------------------------------------------------
//                                                                         -
// Construct : Add an item at the beginning of the list                    -
// ---------                                                               -
//                                                                         -
// -------------------------------------------------------------------------
Handle(PCollection_HSingleList) 
  PCollection_HSingleList::Construct(const Item& T)const
{


 Handle(PCollection_HSingleList) me , L ;
 me = this;
#ifndef OBJS
 L = new PCollection_HSingleList;
#else
 L = new (os_segment::of(this)) PCollection_HSingleList;
#endif
 L->ChangeForwardPointer ( me );
 L->SetValue ( T );			
 return L;
}

/* Anciens INLINE */

Item PCollection_HSingleList::Value() const {
  Standard_NoSuchObject_Raise_if(IsEmpty(),
                                 "Empty Element in HSingleList::Value");
     return Data;
}

Handle(PCollection_HSingleList) PCollection_HSingleList::Tail() const {
  Standard_NoSuchObject_Raise_if (IsEmpty(),
                                  "Empty Element in HSingleList::Value");
  return Next;
}


Standard_Boolean PCollection_HSingleList::IsEmpty()const
{
  return Next.IsNull();
}


void PCollection_HSingleList::SetValue(const Item& T)
{
  Standard_NoSuchObject_Raise_if (IsEmpty(),
                                  "Empty Element in HSingleList::SetValue");
  Data = T;
}


// -------------------------------------------------------------------------
//                                                                         -
// SwapTail : Exchange the tail of the current list with an another list   -
// --------                                                                -
//                                                                         -
// -------------------------------------------------------------------------
void PCollection_HSingleList::SwapTail(Handle(PCollection_HSingleList)&
                                            WithList)
{
  Standard_NoSuchObject_Raise_if (IsEmpty(),
                                  "Empty Element in HSingleList::SwapTail");
  Handle(PCollection_HSingleList) L = Next;
  Next     = WithList;
  WithList = L;
}


void PCollection_HSingleList::ChangeForwardPointer
   (const Handle(PCollection_HSingleList)& L)
{
     Next = L;
}


