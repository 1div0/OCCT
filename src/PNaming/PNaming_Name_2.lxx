// Created on: 2008-08-15
// Created by: Sergey ZARITCHNY <szy@op
// Copyright (c) 2008-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.



inline   void PNaming_Name_2::Type(const Standard_Integer T) 
{myType = T;}

inline   void PNaming_Name_2::ShapeType(const Standard_Integer T) 
{myShapeType = T;}

inline   void PNaming_Name_2::Arguments(const Handle(PNaming_HArray1OfNamedShape)& Args)
{myArgs = Args;}

inline   void PNaming_Name_2::StopNamedShape(const Handle(PNaming_NamedShape)& NS)
{myStop = NS;}

inline   void PNaming_Name_2::Index(const Standard_Integer I) 
{myIndex = I;}

inline   Standard_Integer PNaming_Name_2::Type() const
{return myType;}

inline   Standard_Integer PNaming_Name_2::ShapeType() const 
{return myShapeType;}

inline   Handle_PNaming_HArray1OfNamedShape PNaming_Name_2::Arguments() const
{return myArgs;}

inline   Handle_PNaming_NamedShape PNaming_Name_2::StopNamedShape() const
{return myStop;}

inline   Standard_Integer PNaming_Name_2::Index() const
{return myIndex;}

inline  void PNaming_Name_2::ContextLabel(const Handle(PCollection_HAsciiString)& theLabel)
{myContextLabel = theLabel;}

inline   const Handle(PCollection_HAsciiString)& PNaming_Name_2::ContextLabel() const 
{return myContextLabel;}

inline   void PNaming_Name_2::Orientation(const Standard_Integer Or) 
{myOrientation = Or;}

inline   Standard_Integer PNaming_Name_2::Orientation() const 
{return myOrientation;}