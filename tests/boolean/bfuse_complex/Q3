puts " BUC60068 "
puts "If scales by 1000, time to compute is 10 times greater "
##
## mod pkv from
restore buc60068a.rle a
restore buc60068b.rle b
restore buc60068a.rle c
restore buc60068b.rle d
restore buc60068a.rle e
restore buc60068b.rle f
restore buc60068a.rle g
restore buc60068b.rle h
## mod pkv from
##

## fuse
dchrono j start
bfuse resab a b
dchrono j stop

tscale  c 0 0 0 100
tscale  d 0 0 0 100
dchrono k start
bfuse rescd c d
dchrono k stop

tscale  e 0 0 0 1000
tscale  f 0 0 0 1000
dchrono l start
bfuse resef e f
dchrono l stop

tscale  g 0 0 0 10000
tscale  h 0 0 0 10000
dchrono m start
bfuse resgh g h
dchrono m stop

regexp {Elapsed time: ([0-9]+) Hours ([0-9]+) Minutes ([0-9]|.+) Seconds} [dchrono j show] full Jhours Jminutes Jseconds
regexp {Elapsed time: ([0-9]+) Hours ([0-9]+) Minutes ([0-9]|.+) Seconds} [dchrono k show] full Khours Kminutes Kseconds
regexp {Elapsed time: ([0-9]+) Hours ([0-9]+) Minutes ([0-9]|.+) Seconds} [dchrono l show] full Lhours Lminutes Lseconds
regexp {Elapsed time: ([0-9]+) Hours ([0-9]+) Minutes ([0-9]|.+) Seconds} [dchrono m show] full Mhours Mminutes Mseconds

set Jtime [expr ($Jhours*60*60 + $Jminutes*60 + $Jseconds)*2]
set Ktime [expr $Khours*60*60 + $Kminutes*60 + $Kseconds]
set Ltime [expr $Lhours*60*60 + $Lminutes*60 + $Lseconds]
set Mtime [expr $Mhours*60*60 + $Mminutes*60 + $Mseconds]

if { $Jtime < $Ktime || $Jtime < $Ltime || $Jtime < $Mtime} {
   puts "Error: incorrect performance of bfuse operation:"
   puts "SCALE=1     : $Jtime seconds."
   puts "SCALE=100   : $Ktime seconds."
   puts "SCALE=1000  : $Ltime seconds."
   puts "SCALE=10000 : $Mtime seconds."
}

compound resab rescd resef resgh result

set square 2.5e+13
